{
module Lexer
open System
open Parser
open Microsoft.FSharp.Text.Lexing
let lexeme = LexBuffer<_>.LexemeString
}

let num = '-'? ['0'-'9']+
let white = ' ' | '\t'
let newline = '\n' | '\r' | "\r\n"
let idChar = ['a'-'z' 'A'-'Z' '_' '\'']
let ident = idChar (idChar | ['0'-'9'])*


rule token = parse
    | white     {token lexbuf}
    | newline   {lexbuf.StartPos <- lexbuf.StartPos.NextLine; token lexbuf}
    | num       {NUM (lexeme lexbuf |> int)}
    | "<="      {LEFT}
    | "=>"      {RIGHT}
    | "rec"     {REC}
    | '='       {EQ}
    | '+'       {PLUS}
    | '-'       {MINUS}
    | '*'       {TIMES}
    | '^'       {HAT}
    | '?'       {QMARK}
    | '('       {PA}
    | ')'       {REN}
    | '{'       {BRA}
    | '}'       {CKET}
    | ','       {COMMA}
    | ident     {IDENT (lexeme lexbuf)}
    | eof       {EOF}
    | _         {raise (Exception (sprintf "SyntaxError: Unexpected char: '%s' Line: %d Column: %d" (lexeme lexbuf) (lexbuf.StartPos.Line+1) lexbuf.StartPos.Column))}